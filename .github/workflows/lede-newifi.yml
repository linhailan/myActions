name: Build-newifi-lede
on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/lede-newifi.yml'
  schedule:
        - cron: 0 */4 * * *

jobs:
  pear_newifi_D2:
    runs-on: ubuntu-latest
    steps:    
    - name: Prepare environment.
      env:
          DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        docker rmi `docker images -q`
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo df -h
        curl -fsSL https://raw.githubusercontent.com/linhailan/myActions/master/.bashrc >> ~/.bashrc
        sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
    - name: Clone source and install
      run: |
        git clone https://github.com/linhailan/lede
        cd lede
        ./scripts/feeds update -a
        ./scripts/feeds install -a
    - name: Download and Load custom configuration
      run: |
        cd lede
        curl -fsSL https://raw.githubusercontent.com/linhailan/myActions/master/newifi/newifi.config > .config
        bash <(curl -fsSL https://raw.githubusercontent.com/linhailan/myActions/master/newifi/newifi_custom.sh )
        
        ./scripts/feeds install -a
        make defconfig
    - name: Download package
      run: |
        cd lede
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        sudo df -h
    - name: Multi-core compile
      run: |
        cd lede
        sudo df -h
        echo -e "$(nproc) thread compile"
        
        make -j$(nproc)
        sudo df -h
    - name: Single-core compile
      if: failure()
      run: |
        sudo df -h
        cd lede
        make -j1 V=s
        sudo df -h
    - name: Upload entire bin directory
      uses: actions/upload-artifact@master
      if: always()
      with:
        name: LEDE-newifi_d2-bin-dictionary
        path: lede/bin
    - name: Only Upload Packages to Main Download Station
      if: success()
      run: |
        cd lede/bin
        zip -r pear_newifi_D2-Package.zip . -i *.ipk
        curl -F "token=${{ secrets.UPLOAD_TOKEN }}" -F "location=Router/LEDE/pear_newifi_D2/Lean-Package" -F "file=@pear_newifi_D2-Package.zip" ${{ secrets.MAIN_UPLOAD_PROCESSOR }}   
    - name: Setup Upload dictionary
      if: always()
      run: |
        cd lede/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"
    - name: Only Upload firmware (Without packages)
      uses: actions/upload-artifact@master
      if: always()
      with:
        name: pear_newifi_D2
        path: ${{ env.FIRMWARE }}
    - name: Upload firmware to Main Download Station (Without packages)
      if: success()
      run: |
        cd lede/bin/targets/*/*
        zip -r -o pear_newifi_D2.zip ./
        curl -F "token=${{ secrets.UPLOAD_TOKEN }}" -F "location=Router/LEDE/pear_newifi_D2/Lean-ssrplus" -F "file=@pear_newifi_D2.zip" ${{ secrets.MAIN_UPLOAD_PROCESSOR }}
   
   
